//*!==========================================================================
//  Normalize.scss /4.2.0/ Settings
//  A collection of HTML element and attribute style-normalizations.
//  https://github.com/necolas/normalize.css
//  ==========================================================================


// Variables:
// You can override the default values by setting the variables in your Sass
// before importing the normalize-scss library.

// The font size set on the root html element.

$base-font-size: 16px !default;

// The base line height determines the basic unit of vertical rhythm.

$base-line-height: 24px !default;

// The length unit in which to output vertical rhythm values.
// Supported values: px, em, rem.

$base-unit: 'em' !default;

// The default font family.

$base-font-family: sans-serif !default;

// The font sizes for h1-h6.

$h1-font-size: 2    * $base-font-size !default;
$h2-font-size: 1.5  * $base-font-size !default;
$h3-font-size: 1.17 * $base-font-size !default;
$h4-font-size: 1    * $base-font-size !default;
$h5-font-size: 0.83 * $base-font-size !default;
$h6-font-size: 0.67 * $base-font-size !default;

// The amount lists and blockquotes are indented.

$indent-amount: 40px !default;

// The following variable controls whether normalize-scss will output
// font-sizes, line-heights and block-level top/bottom margins that form a basic
// vertical rhythm on the page, which differs from the original Normalize.css.
// However, changing any of the variables above will cause.

// $normalize-vertical-rhythm to be automatically set to true.

$normalize-vertical-rhythm: false !default;

$support-for: (
  chrome:  -4,
  edge:    -4,
  firefox: -4,
  ie:      9,
  opera:   -4,
  safari:  -4,
  '*':     -4,
) !default;

// Set the current version number for all browsers. As of: 2016-04-30

$support-for-current-browser-version: (
  chrome:  50, // https://en.wikipedia.org/wiki/Google_Chrome_release_history
  edge:    25, // https://en.wikipedia.org/wiki/Microsoft_Edge
  firefox: 46, // https://en.wikipedia.org/wiki/Firefox_release_history
  ie:      11, // https://en.wikipedia.org/wiki/Internet_Explorer_versions
  opera:   36, // https://en.wikipedia.org/wiki/Opera_(web_browser)
  safari:  9,  // https://en.wikipedia.org/wiki/Safari_version_history
) !default;

// support-for()
//
// Determines if the project has declared a minimum supported version number for
// the specified browser.
//
// If configured, this is a wrapper function that uses Compass'
// support-legacy-browser().
// @see http://compass-style.org/reference/compass/support/#function-support-legacy-browser
//
@function support-for($browser, $version) {
  // Ensure $version is an integer (or null).
  @if not (type-of($version) == "null" or type-of($version) == "number" and round($version) == $version) {
    @error "The $version parameter of support-for() must be an integer; #{type-of($version)} given.";
  }

  // Check against declared minimums.
  $min-version: null;
  @if map-has-key($support-for, $browser) {
    $min-version: map-get($support-for, $browser);
  }
  @else if map-has-key($support-for, '*') {
    $min-version: map-get($support-for, '*');
  }

  // Ensure $min-version is an integer (or null).
  @if type-of($min-version) != "null" and type-of($min-version) != "number" {
    @error "$support-for: (#{$browser}: #{$min-version}) must be set to an integer (or null); #{$min-version} is a #{type-of($min-version)}.";
  }
  @elseif type-of($min-version) == "number" and round($min-version) != $min-version {
    @error "$support-for: (#{$browser}: #{$min-version}) must be set to an integer (or null); #{$min-version} is not an integer.";
  }

  // Negative $min-version means "X most recent versions".
  @if type-of($min-version) == "number" and $min-version < 0 {
    @if not map-has-key($support-for-current-browser-version, $browser) {
      @error "#{$browser} not found in $support-for-current-browser-version map; it must be set to an integer.";
    }
    $min-version: map-get($support-for-current-browser-version, $browser) + $min-version + 1;
  }
  @return if(($min-version and ($version >= $min-version)), true, false);
}
